// Generated by CoffeeScript 1.10.0
(function() {
  var albumId, async, clientId, commander, extname, fs, get, inspect, needle, outputDir, ref;

  require('shelljs/global');

  async = require('artillery-async');

  needle = require('needle');

  fs = require('fs');

  commander = require('commander');

  inspect = require('util').inspect;

  extname = require('path').extname;

  commander["arguments"]('<client-id> <album-id> <output-dir>').parse(process.argv);

  get = function(path, cb) {
    var options, url;
    url = "https://api.imgur.com/3" + path;
    options = {
      json: true,
      headers: {
        Authorization: "Client-ID " + clientId
      }
    };
    return needle.get(url, options, cb);
  };

  if (commander.args.length !== 3) {
    commander.help();
  }

  ref = commander.args, clientId = ref[0], albumId = ref[1], outputDir = ref[2];

  mkdir('-p', outputDir);

  get("/album/" + albumId, function(err, res) {
    if (err != null) {
      console.error("Request failed: " + err);
      exit(1);
    }
    if (res.statusCode !== 200) {
      console.error("Fetching the album returned " + res.statusCode);
      exit(1);
    }
    return async.forEachSeries(res.body.data.images, function(item, cb) {
      var e, exts, filename, i, len, path, stream, url;
      url = item.link;
      exts = ['link'];
      if (item.bandwidth > 1024 * 1024 * 2) {
        exts.unshift('webm');
      }
      for (i = 0, len = exts.length; i < len; i++) {
        e = exts[i];
        url = item[e];
        if (url != null) {
          break;
        }
      }
      if (url == null) {
        return cb("No image in " + (inspect(item)));
      }
      filename = (item.title || item.id).replace(/[^\w]+/g, '-') + extname(url);
      console.log(url, '->', filename);
      path = outputDir + "/" + filename;
      stream = fs.createWriteStream(path);
      return needle.get(url).pipe(stream).on('error', cb).on('close', function() {
        fs.utimesSync(path, item.datetime, item.datetime);
        console.log('done');
        return cb();
      });
    }, function(err) {
      if (err != null) {
        return console.error("FAILED: " + err);
      }
    });
  });

}).call(this);
